lua_package_path '/usr/lib/nginx/lua/?.lua;/etc/nginx/lua/?.lua;;';

lua_shared_dict sso_sessions 1m;

server {
    listen 443 ssl;
    server_name sp.example.com;

    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 5m;
    ssl_ciphers AESGCM:HIGH:!EXP:!RC4:!LOW:!aNULL;
    ssl_prefer_server_ciphers on;
    #ssl_protocols TLSv1.2;

    ssl_certificate /etc/pki/tls/certs/sp.example.com.crt;
    ssl_certificate_key /etc/pki/tls/private/sp.example.com.key;

    location / {
        access_by_lua_block {
            local config = require "saml.service_provider.config"
            local sp = require("saml.service_provider"):new(config)

            local ok, err = sp:access()
            if err ~= nil then
                ngx.log(ngx.ERR, err)
                ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
                return
            end
        }

        proxy_pass http://127.0.0.1:8080;
    }

    location /sso/finish-login {
        content_by_lua_block {
            local config = require "saml.service_provider.config"
            local sp = require("saml.service_provider"):new(config)

            local ok, err = sp:finish_login()
            if err ~= nil then
                ngx.log(ngx.ERR, err)
                ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
                return
            end
        }
    }

    location /sso/logout {
        content_by_lua_block {
            local config = require "saml.service_provider.config"
            local sp = require("saml.service_provider"):new(config)

            local ok, err = sp:logout()
            if err ~= nil then
                ngx.log(ngx.ERR, err)
                ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
                return
            end
        }
    }
}
